# PSO example

```elixir
Mix.install([
  {:bia, github: "matiascr/bia"},
  {:kino, "~> 0.10.0"},
  {:kino_vega_lite, "~> 0.1.10"},
  {:vega_lite, "~> 0.1.8"},
  {:explorer, "~> 0.7.1"}
])
```

## Section

```elixir
alias VegaLite, as: Vl
require Kino.VegaLite, as: KVl
```

```elixir
defmodule Visualizer do
  def callback(args) do
    widget = args[:opts][:widget]

    widget
    |> KVl.clear()

    widget
    |> KVl.push_many(
      Enum.map(args[:particles], &GenServer.call(&1, :get_position))
      |> Nx.stack()
      |> Nx.to_list()
      |> Enum.map(fn [x, y] -> %{x: x, y: y} end)
    )

    Process.sleep(100)
  end
end
```

```elixir
defmodule OptimizationFunctions do
  import Nx.Defn

  defn unimodal(tensor) do
    0.26 * (tensor[0] ** 2 + tensor[1] ** 2) - 0.48 * tensor[0] * tensor[1]
  end
end
```

```elixir
bound_up = 10.0
bound_down = -10.0

widget = fn ->
  Vl.new(width: 400, height: 400)
  |> Vl.mark(:circle)
  |> Vl.encode_field(:x, "x", type: :quantitative, scale: [domain: [bound_down, bound_up]])
  |> Vl.encode_field(:y, "y", type: :quantitative, scale: [domain: [bound_down, bound_up]])
  |> KVl.new()
  |> Kino.render()
end
```

```elixir
PSO.new(
  population_size: 20,
  num_iterations: 10,
  bound_up: bound_up,
  bound_down: bound_down,
  inertia: 0.1,
  callback: &Visualizer.callback/1,
  widget: widget.(),
  fun: &OptimizationFunctions.unimodal/1
)
|> PSO.run()
```
